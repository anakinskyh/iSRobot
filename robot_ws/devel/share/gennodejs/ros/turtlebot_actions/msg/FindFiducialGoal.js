// Auto-generated. Do not edit!

// (in-package turtlebot_actions.msg)


"use strict";

let _serializer = require('../base_serialize.js');
let _deserializer = require('../base_deserialize.js');
let _finder = require('../find.js');

//-----------------------------------------------------------

class FindFiducialGoal {
  constructor() {
    this.camera_name = '';
    this.pattern_width = 0;
    this.pattern_height = 0;
    this.pattern_size = 0.0;
    this.pattern_type = 0;
  }

  static serialize(obj, bufferInfo) {
    // Serializes a message object of type FindFiducialGoal
    // Serialize message field [camera_name]
    bufferInfo = _serializer.string(obj.camera_name, bufferInfo);
    // Serialize message field [pattern_width]
    bufferInfo = _serializer.uint8(obj.pattern_width, bufferInfo);
    // Serialize message field [pattern_height]
    bufferInfo = _serializer.uint8(obj.pattern_height, bufferInfo);
    // Serialize message field [pattern_size]
    bufferInfo = _serializer.float32(obj.pattern_size, bufferInfo);
    // Serialize message field [pattern_type]
    bufferInfo = _serializer.uint8(obj.pattern_type, bufferInfo);
    return bufferInfo;
  }

  static deserialize(buffer) {
    //deserializes a message object of type FindFiducialGoal
    let tmp;
    let len;
    let data = new FindFiducialGoal();
    // Deserialize message field [camera_name]
    tmp = _deserializer.string(buffer);
    data.camera_name = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [pattern_width]
    tmp = _deserializer.uint8(buffer);
    data.pattern_width = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [pattern_height]
    tmp = _deserializer.uint8(buffer);
    data.pattern_height = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [pattern_size]
    tmp = _deserializer.float32(buffer);
    data.pattern_size = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [pattern_type]
    tmp = _deserializer.uint8(buffer);
    data.pattern_type = tmp.data;
    buffer = tmp.buffer;
    return {
      data: data,
      buffer: buffer
    }
  }

  static datatype() {
    // Returns string type for a message object
    return 'turtlebot_actions/FindFiducialGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '8906385fe785bb5733551eb61968fe5b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal definition
    uint8   CHESSBOARD = 1
    uint8   CIRCLES_GRID = 2
    uint8   ASYMMETRIC_CIRCLES_GRID =3
    
    string    camera_name       # name of the camera 
    uint8     pattern_width     # number of objects across
    uint8     pattern_height    # number of objects down
    float32   pattern_size      # size the object pattern (square size or circle size)
    uint8     pattern_type      # type of pattern (CHESSBOARD, CIRCLES_GRID, ASYMMETRIC_CIRCLES_GRID)
    
    `;
  }

};

// Constants for message
FindFiducialGoal.Constants = {
  CHESSBOARD: 1,
  CIRCLES_GRID: 2,
  ASYMMETRIC_CIRCLES_GRID: 3,
}

module.exports = FindFiducialGoal;
